
CubaseRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  000008c6  0000095a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  008000f6  008000f6  000009f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000a60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b38  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb4  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000133e  00000000  00000000  0000358c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  000048cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b14  00000000  00000000  00004acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c93  00000000  00000000  000055e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00006273  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	64 c0       	rjmp	.+200    	; 0xca <__ctors_end>
   2:	98 c0       	rjmp	.+304    	; 0x134 <__vector_1>
   4:	7d c0       	rjmp	.+250    	; 0x100 <__bad_interrupt>
   6:	3a c4       	rjmp	.+2164   	; 0x87c <__vector_3>
   8:	7b c0       	rjmp	.+246    	; 0x100 <__bad_interrupt>
   a:	7a c0       	rjmp	.+244    	; 0x100 <__bad_interrupt>
   c:	79 c0       	rjmp	.+242    	; 0x100 <__bad_interrupt>
   e:	78 c0       	rjmp	.+240    	; 0x100 <__bad_interrupt>
  10:	77 c0       	rjmp	.+238    	; 0x100 <__bad_interrupt>
  12:	76 c0       	rjmp	.+236    	; 0x100 <__bad_interrupt>
  14:	75 c0       	rjmp	.+234    	; 0x100 <__bad_interrupt>
  16:	74 c0       	rjmp	.+232    	; 0x100 <__bad_interrupt>
  18:	73 c0       	rjmp	.+230    	; 0x100 <__bad_interrupt>
  1a:	72 c0       	rjmp	.+228    	; 0x100 <__bad_interrupt>
  1c:	71 c0       	rjmp	.+226    	; 0x100 <__bad_interrupt>
  1e:	70 c0       	rjmp	.+224    	; 0x100 <__bad_interrupt>
  20:	6f c0       	rjmp	.+222    	; 0x100 <__bad_interrupt>
  22:	6e c0       	rjmp	.+220    	; 0x100 <__bad_interrupt>
  24:	6d c0       	rjmp	.+218    	; 0x100 <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	05 0c       	add	r0, r5
  28:	09 01       	movw	r0, r18
  2a:	a1 01       	movw	r20, r2
  2c:	85 01       	movw	r16, r10
  2e:	19 00       	.word	0x0019	; ????
  30:	2a 3c       	cpi	r18, 0xCA	; 202
  32:	02 15       	cp	r16, r2
  34:	00 26       	eor	r0, r16
  36:	3c 02       	muls	r19, r28
  38:	95 01       	movw	r18, r10
  3a:	75 10       	cpse	r7, r5
  3c:	81 00       	.word	0x0081	; ????
  3e:	c0 05       	cpc	r28, r0
  40:	01 09       	sbc	r16, r1
  42:	06 a1       	ldd	r16, Z+38	; 0x26
  44:	01 85       	ldd	r16, Z+9	; 0x09
  46:	02 05       	cpc	r16, r2
  48:	07 19       	sub	r16, r7
  4a:	e0 29       	or	r30, r0
  4c:	e7 15       	cp	r30, r7
  4e:	00 25       	eor	r16, r0
  50:	01 75       	andi	r16, 0x51	; 81
  52:	01 95       	neg	r16
  54:	08 81       	ld	r16, Y
  56:	02 95       	swap	r16
  58:	01 75       	andi	r16, 0x51	; 81
  5a:	08 25       	eor	r16, r8
  5c:	65 19       	sub	r22, r5
  5e:	00 29       	or	r16, r0
  60:	65 81       	ldd	r22, Z+5	; 0x05
  62:	00 c0       	rjmp	.+0      	; 0x64 <usbDescriptorConfiguration>

00000064 <usbDescriptorConfiguration>:
  64:	09 02 22 00 01 01 00 80 32 09 04 00 00 01 03 00     ..".....2.......
  74:	00 00 09 21 01 01 00 01 22 3e 00 07 05 81 03 08     ...!....">......
  84:	00 0a                                               ..

00000086 <usbDescriptorDevice>:
  86:	12 01 10 01 00 00 00 08 c0 16 db 27 00 01 01 02     ...........'....
  96:	00 01                                               ..

00000098 <usbDescriptorStringDevice>:
  98:	1c 03 43 00 75 00 62 00 61 00 73 00 65 00 20 00     ..C.u.b.a.s.e. .
  a8:	72 00 65 00 6d 00 6f 00 74 00 65 00                 r.e.m.o.t.e.

000000b4 <usbDescriptorStringVendor>:
  b4:	12 03 56 00 6c 00 61 00 64 00 20 00 54 00 68 00     ..V.l.a.d. .T.h.
  c4:	74 00                                               t.

000000c6 <usbDescriptorString0>:
  c6:	04 03 09 04                                         ....

000000ca <__ctors_end>:
  ca:	11 24       	eor	r1, r1
  cc:	1f be       	out	0x3f, r1	; 63
  ce:	cf e5       	ldi	r28, 0x5F	; 95
  d0:	d4 e0       	ldi	r29, 0x04	; 4
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	a0 e6       	ldi	r26, 0x60	; 96
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e6 ec       	ldi	r30, 0xC6	; 198
  de:	f8 e0       	ldi	r31, 0x08	; 8
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
  e2:	05 90       	lpm	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	a6 3f       	cpi	r26, 0xF6	; 246
  e8:	b1 07       	cpc	r27, r17
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>

000000ec <__do_clear_bss>:
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	a6 ef       	ldi	r26, 0xF6	; 246
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
  f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
  f6:	a6 33       	cpi	r26, 0x36	; 54
  f8:	b2 07       	cpc	r27, r18
  fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>
  fc:	22 d2       	rcall	.+1092   	; 0x542 <main>
  fe:	e1 c3       	rjmp	.+1986   	; 0x8c2 <_exit>

00000100 <__bad_interrupt>:
 100:	7f cf       	rjmp	.-258    	; 0x0 <__vectors>

00000102 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 102:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 104:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 106:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 108:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 10a:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 10c:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 10e:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 110:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 112:	09 c0       	rjmp	.+18     	; 0x126 <usbCrcLoopEntry>

00000114 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 114:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 116:	82 27       	eor	r24, r18

00000118 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 118:	97 95       	ror	r25
    ror     resCrcL
 11a:	87 95       	ror	r24
    brcs    usbCrcNoXor
 11c:	10 f0       	brcs	.+4      	; 0x122 <usbCrcNoXor>
    eor     resCrcL, polyL
 11e:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 120:	95 27       	eor	r25, r21

00000122 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 122:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 124:	c8 f3       	brcs	.-14     	; 0x118 <usbCrcBitLoop>

00000126 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 126:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 128:	a8 f3       	brcs	.-22     	; 0x114 <usbCrcByteLoop>

0000012a <usbCrcReady>:
usbCrcReady:
    ret
 12a:	08 95       	ret

0000012c <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 12c:	ea df       	rcall	.-44     	; 0x102 <usbCrc16>
    st      ptr+, resCrcL
 12e:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 130:	9d 93       	st	X+, r25
    ret
 132:	08 95       	ret

00000134 <__vector_1>:
; Numbers in brackets are clocks counted from center of last sync bit
; when instruction starts

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-25] push only what is necessary to sync with edge ASAP
 134:	cf 93       	push	r28
    in      YL, SREG            ;[-23]
 136:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-22]
 138:	cf 93       	push	r28
    push    YH                  ;[-20]
 13a:	df 93       	push	r29

0000013c <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 13c:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 13e:	84 9b       	sbis	0x10, 4	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
 140:	e9 f7       	brne	.-6      	; 0x13c <waitForJ>

00000142 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
 142:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK              ;[-14]
 144:	0b c0       	rjmp	.+22     	; 0x15c <foundK>
    sbis    USBIN, USBMINUS
 146:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 148:	09 c0       	rjmp	.+18     	; 0x15c <foundK>
    sbis    USBIN, USBMINUS
 14a:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 14c:	07 c0       	rjmp	.+14     	; 0x15c <foundK>
    sbis    USBIN, USBMINUS
 14e:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 150:	05 c0       	rjmp	.+10     	; 0x15c <foundK>
    sbis    USBIN, USBMINUS
 152:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 154:	03 c0       	rjmp	.+6      	; 0x15c <foundK>
    sbis    USBIN, USBMINUS
 156:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 158:	01 c0       	rjmp	.+2      	; 0x15c <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 15a:	8b c0       	rjmp	.+278    	; 0x272 <sofError>

0000015c <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-12]
 15c:	6f 93       	push	r22
;   [---]                       ;[-11]
    lds     YL, usbInputBufOffset;[-10]
 15e:	c0 91 19 01 	lds	r28, 0x0119	; 0x800119 <usbInputBufOffset>
;   [---]                       ;[-9]
    clr     YH                  ;[-8]
 162:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-7] [rx loop init]
 164:	c0 5e       	subi	r28, 0xE0	; 224
    sbci    YH, hi8(-(usbRxBuf));[-6] [rx loop init]
 166:	de 4f       	sbci	r29, 0xFE	; 254
    push    shift               ;[-5]
 168:	2f 93       	push	r18
;   [---]                       ;[-4]
    ldi     bitcnt, 0x55        ;[-3] [rx loop init]
 16a:	65 e5       	ldi	r22, 0x55	; 85
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
 16c:	84 9b       	sbis	0x10, 4	; 16
    rjmp    haveTwoBitsK        ;[-1]
 16e:	03 c0       	rjmp	.+6      	; 0x176 <haveTwoBitsK>
    pop     shift               ;[0] undo the push from before
 170:	2f 91       	pop	r18
    pop     bitcnt              ;[2] undo the push from before
 172:	6f 91       	pop	r22
    rjmp    waitForK            ;[4] this was not the end of sync, retry
 174:	e6 cf       	rjmp	.-52     	; 0x142 <waitForK>

00000176 <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1              ;[1]
 176:	0f 93       	push	r16
    push    x2              ;[3]
 178:	1f 93       	push	r17
    push    x3              ;[5]
 17a:	4f 93       	push	r20
    ldi     shift, 0        ;[7]
 17c:	20 e0       	ldi	r18, 0x00	; 0
    ldi     x3, 1<<4        ;[8] [rx loop init] first sample is inverse bit, compensate that
 17e:	40 e1       	ldi	r20, 0x10	; 16
    push    x4              ;[9] == leap
 180:	5f 93       	push	r21

    in      x1, USBIN       ;[11] <-- sample bit 0
 182:	00 b3       	in	r16, 0x10	; 16
    andi    x1, USBMASK     ;[12]
 184:	04 71       	andi	r16, 0x14	; 20
    bst     x1, USBMINUS    ;[13]
 186:	04 fb       	bst	r16, 4
    bld     shift, 7        ;[14]
 188:	27 f9       	bld	r18, 7
    push    cnt             ;[15]
 18a:	3f 93       	push	r19
    ldi     leap, 0         ;[17] [rx loop init]
 18c:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[18] [rx loop init]
 18e:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[19] arrives at [21]
 190:	39 c0       	rjmp	.+114    	; 0x204 <rxbit1>

00000192 <unstuff6>:

; duration of unstuffing code should be 10.66666667 cycles. We adjust "leap"
; accordingly to approximate this value in the long run.

unstuff6:
    andi    x2, USBMASK ;[03]
 192:	14 71       	andi	r17, 0x14	; 20
    ori     x3, 1<<6    ;[04] will not be shifted any more
 194:	40 64       	ori	r20, 0x40	; 64
    andi    shift, ~0x80;[05]
 196:	2f 77       	andi	r18, 0x7F	; 127
    mov     x1, x2      ;[06] sampled bit 7 is actually re-sampled bit 6
 198:	01 2f       	mov	r16, r17
    subi    leap, -1    ;[07] total duration = 11 bits -> subtract 1/3
 19a:	5f 5f       	subi	r21, 0xFF	; 255
    rjmp    didUnstuff6 ;[08]
 19c:	1e c0       	rjmp	.+60     	; 0x1da <didUnstuff6>

0000019e <unstuff7>:

unstuff7:
    ori     x3, 1<<7    ;[09] will not be shifted any more
 19e:	40 68       	ori	r20, 0x80	; 128
    in      x2, USBIN   ;[00] [10]  re-sample bit 7
 1a0:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;[01]
 1a2:	14 71       	andi	r17, 0x14	; 20
    andi    shift, ~0x80;[02]
 1a4:	2f 77       	andi	r18, 0x7F	; 127
    subi    leap, 2     ;[03] total duration = 10 bits -> add 1/3
 1a6:	52 50       	subi	r21, 0x02	; 2
    rjmp    didUnstuff7 ;[04]
 1a8:	1f c0       	rjmp	.+62     	; 0x1e8 <didUnstuff7>

000001aa <unstuffEven>:

unstuffEven:
    ori     x3, 1<<6    ;[09] will be shifted right 6 times for bit 0
 1aa:	40 64       	ori	r20, 0x40	; 64
    in      x1, USBIN   ;[00] [10]
 1ac:	00 b3       	in	r16, 0x10	; 16
    andi    shift, ~0x80;[01]
 1ae:	2f 77       	andi	r18, 0x7F	; 127
    andi    x1, USBMASK ;[02]
 1b0:	04 71       	andi	r16, 0x14	; 20
    breq    se0         ;[03]
 1b2:	d1 f1       	breq	.+116    	; 0x228 <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 1b4:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <unstuffEven+0xe>
    rjmp    didUnstuffE ;[06]
 1b8:	23 c0       	rjmp	.+70     	; 0x200 <didUnstuffE>

000001ba <unstuffOdd>:

unstuffOdd:
    ori     x3, 1<<5    ;[09] will be shifted right 4 times for bit 1
 1ba:	40 62       	ori	r20, 0x20	; 32
    in      x2, USBIN   ;[00] [10]
 1bc:	10 b3       	in	r17, 0x10	; 16
    andi    shift, ~0x80;[01]
 1be:	2f 77       	andi	r18, 0x7F	; 127
    andi    x2, USBMASK ;[02]
 1c0:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;[03]
 1c2:	91 f1       	breq	.+100    	; 0x228 <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 1c4:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <unstuffOdd+0xe>
    rjmp    didUnstuffO ;[06]
 1c8:	25 c0       	rjmp	.+74     	; 0x214 <didUnstuffO>

000001ca <rxByteLoop>:

rxByteLoop:
    andi    x1, USBMASK ;[03]
 1ca:	04 71       	andi	r16, 0x14	; 20
    eor     x2, x1      ;[04]
 1cc:	10 27       	eor	r17, r16
    subi    leap, 1     ;[05]
 1ce:	51 50       	subi	r21, 0x01	; 1
    brpl    skipLeap    ;[06]
 1d0:	12 f4       	brpl	.+4      	; 0x1d6 <skipLeap>
    subi    leap, -3    ;1 one leap cycle every 3rd byte -> 85 + 1/3 cycles per byte
 1d2:	5d 5f       	subi	r21, 0xFD	; 253
	...

000001d6 <skipLeap>:
    nop                 ;1
skipLeap:
    subi    x2, 1       ;[08]
 1d6:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[09]
 1d8:	27 95       	ror	r18

000001da <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0xfc ;[10]
 1da:	2c 3f       	cpi	r18, 0xFC	; 252
    in      x2, USBIN   ;[00] [11] <-- sample bit 7
 1dc:	10 b3       	in	r17, 0x10	; 16
    brcc    unstuff6    ;[01]
 1de:	c8 f6       	brcc	.-78     	; 0x192 <unstuff6>
    andi    x2, USBMASK ;[02]
 1e0:	14 71       	andi	r17, 0x14	; 20
    eor     x1, x2      ;[03]
 1e2:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 1e4:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 1e6:	27 95       	ror	r18

000001e8 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0xfc ;[06]
 1e8:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuff7    ;[07]
 1ea:	c8 f6       	brcc	.-78     	; 0x19e <unstuff7>
    eor     x3, shift   ;[08] reconstruct: x3 is 1 at bit locations we changed, 0 at others
 1ec:	42 27       	eor	r20, r18
    st      y+, x3      ;[09] store data
 1ee:	49 93       	st	Y+, r20

000001f0 <rxBitLoop>:
rxBitLoop:
    in      x1, USBIN   ;[00] [11] <-- sample bit 0/2/4
 1f0:	00 b3       	in	r16, 0x10	; 16
    andi    x1, USBMASK ;[01]
 1f2:	04 71       	andi	r16, 0x14	; 20
    eor     x2, x1      ;[02]
 1f4:	10 27       	eor	r17, r16
    andi    x3, 0x3f    ;[03] topmost two bits reserved for 6 and 7
 1f6:	4f 73       	andi	r20, 0x3F	; 63
    subi    x2, 1       ;[04]
 1f8:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[05]
 1fa:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 1fc:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffEven ;[07]
 1fe:	a8 f6       	brcc	.-86     	; 0x1aa <unstuffEven>

00000200 <didUnstuffE>:
didUnstuffE:
    lsr     x3          ;[08]
 200:	46 95       	lsr	r20
    lsr     x3          ;[09]
 202:	46 95       	lsr	r20

00000204 <rxbit1>:
rxbit1:
    in      x2, USBIN   ;[00] [10] <-- sample bit 1/3/5
 204:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;[01]
 206:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;[02]
 208:	79 f0       	breq	.+30     	; 0x228 <se0>
    eor     x1, x2      ;[03]
 20a:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 20c:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 20e:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 210:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffOdd  ;[07]
 212:	98 f6       	brcc	.-90     	; 0x1ba <unstuffOdd>

00000214 <didUnstuffO>:
didUnstuffO:
    subi    bitcnt, 0xab;[08] == addi 0x55, 0x55 = 0x100/3
 214:	6b 5a       	subi	r22, 0xAB	; 171
    brcs    rxBitLoop   ;[09]
 216:	60 f3       	brcs	.-40     	; 0x1f0 <rxBitLoop>

    subi    cnt, 1      ;[10]
 218:	31 50       	subi	r19, 0x01	; 1
    in      x1, USBIN   ;[00] [11] <-- sample bit 6
 21a:	00 b3       	in	r16, 0x10	; 16
    brcc    rxByteLoop  ;[01]
 21c:	b0 f6       	brcc	.-84     	; 0x1ca <rxByteLoop>
    rjmp    overflow
 21e:	00 c0       	rjmp	.+0      	; 0x220 <overflow>

00000220 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 220:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 222:	1a bf       	out	0x3a, r17	; 58

00000224 <ignorePacket>:
ignorePacket:
    clr     token
 224:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 226:	19 c0       	rjmp	.+50     	; 0x25a <handleSetupOrOut>

00000228 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 228:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 22a:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 22c:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 22e:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 230:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 232:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 234:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 236:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 238:	09 f1       	breq	.+66     	; 0x27c <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 23a:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 23c:	f9 f0       	breq	.+62     	; 0x27c <handleData>
    lds     shift, usbDeviceAddr;[17]
 23e:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 242:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 244:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 246:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 248:	ed cf       	rjmp	.-38     	; 0x224 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 24a:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 24c:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 24e:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 250:	51 f1       	breq	.+84     	; 0x2a6 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 252:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 254:	11 f0       	breq	.+4      	; 0x25a <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 256:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 258:	29 f7       	brne	.-54     	; 0x224 <ignorePacket>

0000025a <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 25a:	00 93 1e 01 	sts	0x011E, r16	; 0x80011e <usbCurrentTok>

0000025e <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 25e:	3f 91       	pop	r19
 260:	5f 91       	pop	r21
 262:	4f 91       	pop	r20
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	2f 91       	pop	r18
 26a:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
 26c:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 26e:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 270:	65 cf       	rjmp	.-310    	; 0x13c <waitForJ>

00000272 <sofError>:
sofError:
    POP_RETI                    ;macro call
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	cf bf       	out	0x3f, r28	; 63
 278:	cf 91       	pop	r28
    reti
 27a:	18 95       	reti

0000027c <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 27c:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <usbCurrentTok>
    tst     shift               ;[20]
 280:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 282:	69 f3       	breq	.-38     	; 0x25e <doReturn>
    lds     x2, usbRxLen        ;[22]
 284:	10 91 1c 01 	lds	r17, 0x011C	; 0x80011c <usbRxLen>
    tst     x2                  ;[24]
 288:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 28a:	91 f5       	brne	.+100    	; 0x2f0 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 28c:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 28e:	92 f1       	brmi	.+100    	; 0x2f4 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 290:	30 93 1c 01 	sts	0x011C, r19	; 0x80011c <usbRxLen>
    sts     usbRxToken, shift   ;[30]
 294:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
 298:	10 91 19 01 	lds	r17, 0x0119	; 0x800119 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
 29c:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 29e:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 2a0:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 2a4:	27 c0       	rjmp	.+78     	; 0x2f4 <sendAckAndReti>

000002a6 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 2a6:	00 91 1c 01 	lds	r16, 0x011C	; 0x80011c <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 2aa:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 2ac:	0c f5       	brge	.+66     	; 0x2f0 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 2ae:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 2b0:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 2b2:	49 f4       	brne	.+18     	; 0x2c6 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 2b4:	30 91 ca 00 	lds	r19, 0x00CA	; 0x8000ca <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 2b8:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 2ba:	1d c0       	rjmp	.+58     	; 0x2f6 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 2bc:	00 93 ca 00 	sts	0x00CA, r16	; 0x8000ca <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
 2c0:	c0 e0       	ldi	r28, 0x00	; 0
    ldi     YH, hi8(usbTxBuf)   ;[44]
 2c2:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 2c4:	1c c0       	rjmp	.+56     	; 0x2fe <usbSendAndReti>

000002c6 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 2c6:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 2ca:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 2cc:	14 c0       	rjmp	.+40     	; 0x2f6 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 2ce:	00 93 0b 01 	sts	0x010B, r16	; 0x80010b <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 2d2:	cc e0       	ldi	r28, 0x0C	; 12
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 2d4:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 2d6:	13 c0       	rjmp	.+38     	; 0x2fe <usbSendAndReti>

000002d8 <bitstuffN>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuffN:
    eor     x1, x4          ;[5]
 2d8:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
 2da:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[7]
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <bitstuffN+0x6>
    nop                     ;[9]
 2de:	00 00       	nop
    out     USBOUT, x1      ;[10] <-- out
 2e0:	02 bb       	out	0x12, r16	; 18
    rjmp    didStuffN       ;[0]
 2e2:	1a c0       	rjmp	.+52     	; 0x318 <didStuffN>

000002e4 <bitstuff6>:
    
bitstuff6:
    eor     x1, x4          ;[5]
 2e4:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6] Carry is zero due to brcc
 2e6:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[7] compensate for ror shift at branch destination
 2e8:	22 1f       	adc	r18, r18
    rjmp    didStuff6       ;[8]
 2ea:	1d c0       	rjmp	.+58     	; 0x326 <didStuff6>

000002ec <bitstuff7>:

bitstuff7:
    ldi     x2, 0           ;[2] Carry is zero due to brcc
 2ec:	10 e0       	ldi	r17, 0x00	; 0
    rjmp    didStuff7       ;[3]
 2ee:	21 c0       	rjmp	.+66     	; 0x332 <didStuff7>

000002f0 <sendNakAndReti>:


sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
 2f0:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <sendX3AndReti>

000002f4 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
 2f4:	32 ed       	ldi	r19, 0xD2	; 210

000002f6 <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
 2f6:	43 2f       	mov	r20, r19

000002f8 <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
 2f8:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
 2fa:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
 2fc:	32 e0       	ldi	r19, 0x02	; 2

000002fe <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
 2fe:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK     ;[-11]
 300:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 302:	94 9a       	sbi	0x12, 4	; 18
    in      x1, USBOUT      ;[-8] port mirror for tx loop
 304:	02 b3       	in	r16, 0x12	; 18
    out     USBDDR, x2      ;[-7] <- acquire bus
 306:	11 bb       	out	0x11, r17	; 17
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
 308:	54 e1       	ldi	r21, 0x14	; 20
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
 30a:	20 e8       	ldi	r18, 0x80	; 128

0000030c <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x35    ;[-4] [6] binary 0011 0101
 30c:	65 e3       	ldi	r22, 0x35	; 53

0000030e <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [7]
 30e:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [8]
 310:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [9] <-- out N
 312:	02 bb       	out	0x12, r16	; 18
    ror     shift           ;[0] [10]
 314:	27 95       	ror	r18
    ror     x2              ;[1]
 316:	17 95       	ror	r17

00000318 <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
 318:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
 31a:	f0 f6       	brcc	.-68     	; 0x2d8 <bitstuffN>
    lsr     bitcnt          ;[4]
 31c:	66 95       	lsr	r22
    brcc    txBitLoop       ;[5]
 31e:	b8 f7       	brcc	.-18     	; 0x30e <txBitLoop>
    brne    txBitLoop       ;[6]
 320:	b1 f7       	brne	.-20     	; 0x30e <txBitLoop>

    sbrs    shift, 0        ;[7]
 322:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
 324:	05 27       	eor	r16, r21

00000326 <didStuff6>:
didStuff6:
    out     USBOUT, x1      ;[-1] [9] <-- out 6
 326:	02 bb       	out	0x12, r16	; 18
    ror     shift           ;[0] [10]
 328:	27 95       	ror	r18
    ror     x2              ;[1]
 32a:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[2]
 32c:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff6       ;[3]
 32e:	d0 f6       	brcc	.-76     	; 0x2e4 <bitstuff6>
    ror     shift           ;[4]
 330:	27 95       	ror	r18

00000332 <didStuff7>:
didStuff7:
    ror     x2              ;[5]
 332:	17 95       	ror	r17
    sbrs    x2, 7           ;[6]
 334:	17 ff       	sbrs	r17, 7
    eor     x1, x4          ;[7]
 336:	05 27       	eor	r16, r21
    nop                     ;[8]
 338:	00 00       	nop
    cpi     x2, 0xfc        ;[9]
 33a:	1c 3f       	cpi	r17, 0xFC	; 252
    out     USBOUT, x1      ;[-1][10] <-- out 7
 33c:	02 bb       	out	0x12, r16	; 18
    brcc    bitstuff7       ;[0] [11]
 33e:	b0 f6       	brcc	.-84     	; 0x2ec <bitstuff7>
    ld      shift, y+       ;[1]
 340:	29 91       	ld	r18, Y+
    dec     cnt             ;[3]
 342:	3a 95       	dec	r19
    brne    txByteLoop      ;[4]
 344:	19 f7       	brne	.-58     	; 0x30c <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[5] prepare SE0 [spec says EOP may be 21 to 25 cycles]
 346:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[6]
 348:	10 91 1d 01 	lds	r17, 0x011D	; 0x80011d <usbNewDeviceAddr>
    lsl     x2              ;[8] we compare with left shifted address
 34c:	11 0f       	add	r17, r17
    subi    YL, 20 + 2      ;[9] Only assign address on data packets, not ACK/NAK in x3
 34e:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[10]
 350:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
 352:	02 bb       	out	0x12, r16	; 18
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[0]
 354:	11 f0       	breq	.+4      	; 0x35a <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
 356:	10 93 17 01 	sts	0x0117, r17	; 0x800117 <usbDeviceAddr>

0000035a <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[2] int0 occurred during TX -- clear pending flag
 35a:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[3]
 35c:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[4]
 35e:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR      ;[5]
 360:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK     ;[6] set both pins to input
 362:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1          ;[7]
 364:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[8] configure no pullup on both pins
 366:	4b 7e       	andi	r20, 0xEB	; 235
    ldi     x4, 4           ;[9]
 368:	54 e0       	ldi	r21, 0x04	; 4

0000036a <se0Delay>:
se0Delay:
    dec     x4              ;[10] [13] [16] [19]
 36a:	5a 95       	dec	r21
    brne    se0Delay        ;[11] [14] [17] [20]
 36c:	f1 f7       	brne	.-4      	; 0x36a <se0Delay>
    out     USBOUT, x1      ;[21] <-- out J (idle) -- end of SE0 (EOP signal)
 36e:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2      ;[22] <-- release bus now
 370:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3      ;[23] <-- ensure no pull-up resistors are active
 372:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
 374:	74 cf       	rjmp	.-280    	; 0x25e <doReturn>

00000376 <button_init>:
	{&PINB, 1 << PINB0, 0, 0x0A, true, 1 << PINB0, true, "BTN_ENCODER"},
};

void button_init(void)
{
	DDRC &= ~(1 << DDRC0 | 1 << DDRC1 | 1 << DDRC2 | 1 << DDRC3 | 1 << DDRC4 | 1 << DDRC5);
 376:	84 b3       	in	r24, 0x14	; 20
 378:	80 7c       	andi	r24, 0xC0	; 192
 37a:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << PORTC0 | 1 << PORTC1 | 1 << PORTC2 | 1 << PORTC3 | 1 << PORTC4 | 1 << PORTC5);
 37c:	85 b3       	in	r24, 0x15	; 21
 37e:	8f 63       	ori	r24, 0x3F	; 63
 380:	85 bb       	out	0x15, r24	; 21
	
	DDRB &= ~(1 << DDRB0);
 382:	b8 98       	cbi	0x17, 0	; 23
	PORTB |= (1 << PORTB0);
 384:	c0 9a       	sbi	0x18, 0	; 24
 386:	08 95       	ret

00000388 <button_routine>:
	
	input->last_io_state = current_io_state;
}

void button_routine(void)
{
 388:	a0 e6       	ldi	r26, 0x60	; 96
 38a:	b0 e0       	ldi	r27, 0x00	; 0
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	90 e0       	ldi	r25, 0x00	; 0

inline static void button_process( struct BUTTON_CONFIGURATION *input)
{
	uint8_t current_io_state = *input->io & input->mask;
	
	if(current_io_state != input->last_io_state)
 390:	4a e0       	ldi	r20, 0x0A	; 10
	}
	else if(input->actionTaken == false)
	{
		if(input->debounce_counter >= input->debounce_threshold)
		{
			input->is_pressed = input->is_pressed ? false : true;
 392:	51 e0       	ldi	r21, 0x01	; 1
	PORTB |= (1 << PORTB0);
}

inline static void button_process( struct BUTTON_CONFIGURATION *input)
{
	uint8_t current_io_state = *input->io & input->mask;
 394:	ed 91       	ld	r30, X+
 396:	fc 91       	ld	r31, X
 398:	11 97       	sbiw	r26, 0x01	; 1
 39a:	30 81       	ld	r19, Z
 39c:	12 96       	adiw	r26, 0x02	; 2
 39e:	2c 91       	ld	r18, X
 3a0:	12 97       	sbiw	r26, 0x02	; 2
 3a2:	23 23       	and	r18, r19
	
	if(current_io_state != input->last_io_state)
 3a4:	48 9f       	mul	r20, r24
 3a6:	f0 01       	movw	r30, r0
 3a8:	49 9f       	mul	r20, r25
 3aa:	f0 0d       	add	r31, r0
 3ac:	11 24       	eor	r1, r1
 3ae:	e0 5a       	subi	r30, 0xA0	; 160
 3b0:	ff 4f       	sbci	r31, 0xFF	; 255
 3b2:	36 81       	ldd	r19, Z+6	; 0x06
 3b4:	23 17       	cp	r18, r19
 3b6:	19 f0       	breq	.+6      	; 0x3be <button_routine+0x36>
	{
		input->debounce_counter = 0;
 3b8:	13 82       	std	Z+3, r1	; 0x03
		input->actionTaken = false;
 3ba:	17 82       	std	Z+7, r1	; 0x07
 3bc:	11 c0       	rjmp	.+34     	; 0x3e0 <button_routine+0x58>
	}
	else if(input->actionTaken == false)
 3be:	37 81       	ldd	r19, Z+7	; 0x07
 3c0:	31 11       	cpse	r19, r1
 3c2:	0e c0       	rjmp	.+28     	; 0x3e0 <button_routine+0x58>
	{
		if(input->debounce_counter >= input->debounce_threshold)
 3c4:	63 81       	ldd	r22, Z+3	; 0x03
 3c6:	14 96       	adiw	r26, 0x04	; 4
 3c8:	3c 91       	ld	r19, X
 3ca:	14 97       	sbiw	r26, 0x04	; 4
 3cc:	63 17       	cp	r22, r19
 3ce:	28 f0       	brcs	.+10     	; 0x3da <button_routine+0x52>
		{
			input->is_pressed = input->is_pressed ? false : true;
 3d0:	35 81       	ldd	r19, Z+5	; 0x05
 3d2:	35 27       	eor	r19, r21
 3d4:	35 83       	std	Z+5, r19	; 0x05
			input->actionTaken = true;
 3d6:	57 83       	std	Z+7, r21	; 0x07
 3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <button_routine+0x58>
		}
		else
		{
			input->debounce_counter++;
 3da:	33 81       	ldd	r19, Z+3	; 0x03
 3dc:	3f 5f       	subi	r19, 0xFF	; 255
 3de:	33 83       	std	Z+3, r19	; 0x03
		}
	}
	
	input->last_io_state = current_io_state;
 3e0:	48 9f       	mul	r20, r24
 3e2:	f0 01       	movw	r30, r0
 3e4:	49 9f       	mul	r20, r25
 3e6:	f0 0d       	add	r31, r0
 3e8:	11 24       	eor	r1, r1
 3ea:	e0 5a       	subi	r30, 0xA0	; 160
 3ec:	ff 4f       	sbci	r31, 0xFF	; 255
 3ee:	26 83       	std	Z+6, r18	; 0x06
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	1a 96       	adiw	r26, 0x0a	; 10
}

void button_routine(void)
{

	for (uint8_t i = 0; i < sizeof(inputs)/sizeof(inputs[0]); i++)
 3f4:	87 30       	cpi	r24, 0x07	; 7
 3f6:	91 05       	cpc	r25, r1
 3f8:	69 f6       	brne	.-102    	; 0x394 <button_routine+0xc>
	{
		struct BUTTON_CONFIGURATION *input = &inputs[i];
		button_process(input);
	}

}
 3fa:	08 95       	ret

000003fc <button_is_pressed>:

bool button_is_pressed(BUTTON btn)
{
	return inputs[(uint8_t)btn].is_pressed == true ? false : true;
 3fc:	2a e0       	ldi	r18, 0x0A	; 10
 3fe:	82 9f       	mul	r24, r18
 400:	c0 01       	movw	r24, r0
 402:	11 24       	eor	r1, r1
 404:	fc 01       	movw	r30, r24
 406:	e0 5a       	subi	r30, 0xA0	; 160
 408:	ff 4f       	sbci	r31, 0xFF	; 255
 40a:	95 81       	ldd	r25, Z+5	; 0x05
}
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	89 27       	eor	r24, r25
 410:	08 95       	ret

00000412 <keyboard_init>:
	{Button_ENC,	ON_PRESSED, HID_CONSUMER_MUTE,		0xFF, false}
};

void keyboard_init(void)
{
	button_init();
 412:	b1 df       	rcall	.-158    	; 0x376 <button_init>
	encoder_init();
 414:	32 c0       	rjmp	.+100    	; 0x47a <encoder_init>

00000416 <keyboard_routine>:
		key->lastState = btn_state;
	}
}

void keyboard_routine(void)
{
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
	button_routine();
 41a:	b6 df       	rcall	.-148    	; 0x388 <button_routine>
	encoder_routine();
 41c:	37 d0       	rcall	.+110    	; 0x48c <encoder_routine>
 41e:	c6 ea       	ldi	r28, 0xA6	; 166
 420:	d0 e0       	ldi	r29, 0x00	; 0
static void keyboard_process_buttons(void)
{
	for(uint8_t i = 0; i < sizeof(keyboardMap) / sizeof(keyboardMap[0]); i++)
	{
		struct KEYBOARD_KEY *key = &keyboardMap[i];
		uint8_t btn_state = button_is_pressed(key->btn);
 422:	88 81       	ld	r24, Y
 424:	eb df       	rcall	.-42     	; 0x3fc <button_is_pressed>
		if (key->mode == ON_PRESSED)
 426:	99 81       	ldd	r25, Y+1	; 0x01
 428:	91 30       	cpi	r25, 0x01	; 1
 42a:	29 f4       	brne	.+10     	; 0x436 <keyboard_routine+0x20>
		{
			if(key->lastState == false && btn_state == true)
 42c:	2b 81       	ldd	r18, Y+3	; 0x03
 42e:	21 11       	cpse	r18, r1
 430:	02 c0       	rjmp	.+4      	; 0x436 <keyboard_routine+0x20>
 432:	81 11       	cpse	r24, r1
			{
				key->hasPendingAction = true;
 434:	9c 83       	std	Y+4, r25	; 0x04
			}
		}
		
		key->lastState = btn_state;
 436:	8b 83       	std	Y+3, r24	; 0x03
 438:	25 96       	adiw	r28, 0x05	; 5
	encoder_init();
}

static void keyboard_process_buttons(void)
{
	for(uint8_t i = 0; i < sizeof(keyboardMap) / sizeof(keyboardMap[0]); i++)
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	c9 3c       	cpi	r28, 0xC9	; 201
 43e:	d8 07       	cpc	r29, r24
 440:	81 f7       	brne	.-32     	; 0x422 <keyboard_routine+0xc>
void keyboard_routine(void)
{
	button_routine();
	encoder_routine();
	keyboard_process_buttons();
}
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <keyboard_get_pressed_key>:

uint8_t keyboard_get_pressed_key(void)
{
 448:	e6 ea       	ldi	r30, 0xA6	; 166
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < sizeof(keyboardMap) / sizeof(keyboardMap[0]); i++)
	{
		struct KEYBOARD_KEY *key = &keyboardMap[i];
		
		if(key->hasPendingAction == true)
 450:	24 81       	ldd	r18, Z+4	; 0x04
 452:	22 23       	and	r18, r18
 454:	59 f0       	breq	.+22     	; 0x46c <__stack+0xd>
		{
			key->hasPendingAction = false;
 456:	25 e0       	ldi	r18, 0x05	; 5
 458:	28 9f       	mul	r18, r24
 45a:	f0 01       	movw	r30, r0
 45c:	29 9f       	mul	r18, r25
 45e:	f0 0d       	add	r31, r0
 460:	11 24       	eor	r1, r1
 462:	ea 55       	subi	r30, 0x5A	; 90
 464:	ff 4f       	sbci	r31, 0xFF	; 255
 466:	14 82       	std	Z+4, r1	; 0x04
			return key->hidCode;
 468:	82 81       	ldd	r24, Z+2	; 0x02
 46a:	08 95       	ret
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	35 96       	adiw	r30, 0x05	; 5
	keyboard_process_buttons();
}

uint8_t keyboard_get_pressed_key(void)
{
	for(uint8_t i = 0; i < sizeof(keyboardMap) / sizeof(keyboardMap[0]); i++)
 470:	87 30       	cpi	r24, 0x07	; 7
 472:	91 05       	cpc	r25, r1
 474:	69 f7       	brne	.-38     	; 0x450 <keyboard_get_pressed_key+0x8>
		{
			key->hasPendingAction = false;
			return key->hidCode;
		}
	}
	return 0;
 476:	80 e0       	ldi	r24, 0x00	; 0
}
 478:	08 95       	ret

0000047a <encoder_init>:

volatile ENCODER_SPIN_DIRECTION encoder_direction;

void encoder_init(void)
{
	ENCODER_DDR  &= ~((1 << ENCODER_PIN1) | (1<<ENCODER_PIN2));
 47a:	81 b3       	in	r24, 0x11	; 17
 47c:	8f 73       	andi	r24, 0x3F	; 63
 47e:	81 bb       	out	0x11, r24	; 17
	ENCODER_PORT |=  ((1 << ENCODER_PIN1) | (1<<ENCODER_PIN2));
 480:	82 b3       	in	r24, 0x12	; 18
 482:	80 6c       	ori	r24, 0xC0	; 192
 484:	82 bb       	out	0x12, r24	; 18
	
	encoder_direction = ENCODER_SPIN_DIRECTION_NONE;
 486:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <encoder_direction>
 48a:	08 95       	ret

0000048c <encoder_routine>:
{
	static unsigned char stateEnc; 	
	unsigned char tmp;  
	unsigned char currentState = 0;
	
	if ((ENCODER_PIN & (1<<ENCODER_PIN1))!= 0) 
 48c:	80 b3       	in	r24, 0x10	; 16

void encoder_routine(void)
{
	static unsigned char stateEnc; 	
	unsigned char tmp;  
	unsigned char currentState = 0;
 48e:	86 fb       	bst	r24, 6
 490:	22 27       	eor	r18, r18
 492:	20 f9       	bld	r18, 0
	
	if ((ENCODER_PIN & (1<<ENCODER_PIN1))!= 0) 
	{
		currentState |= (1 << 0);
	}
	if ((ENCODER_PIN & (1<<ENCODER_PIN2))!= 0) 
 494:	87 99       	sbic	0x10, 7	; 16
	{
		currentState |= (1 << 1);
 496:	22 60       	ori	r18, 0x02	; 2
	}

	tmp = stateEnc;
 498:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <__data_end>
	if (currentState == (tmp & b00000011)) 
 49c:	89 2f       	mov	r24, r25
 49e:	83 70       	andi	r24, 0x03	; 3
 4a0:	28 17       	cp	r18, r24
 4a2:	91 f0       	breq	.+36     	; 0x4c8 <encoder_routine+0x3c>
		return;

	tmp = (tmp<<2)|currentState;
 4a4:	34 e0       	ldi	r19, 0x04	; 4
 4a6:	93 9f       	mul	r25, r19
 4a8:	c0 01       	movw	r24, r0
 4aa:	11 24       	eor	r1, r1
 4ac:	82 2b       	or	r24, r18
	stateEnc = tmp;
 4ae:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__data_end>

	encoder_direction = ENCODER_SPIN_DIRECTION_NONE;
 4b2:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <encoder_direction>

	if (tmp == b11100001) 
 4b6:	81 3e       	cpi	r24, 0xE1	; 225
 4b8:	11 f4       	brne	.+4      	; 0x4be <encoder_routine+0x32>
		encoder_direction = ENCODER_SPIN_DIRECTION_LEFT;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	03 c0       	rjmp	.+6      	; 0x4c4 <encoder_routine+0x38>
	if (tmp == b11010010) 
 4be:	82 3d       	cpi	r24, 0xD2	; 210
 4c0:	19 f4       	brne	.+6      	; 0x4c8 <encoder_routine+0x3c>
		encoder_direction = ENCODER_SPIN_DIRECTION_RIGHT;
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <encoder_direction>
 4c8:	08 95       	ret

000004ca <encoder_get_direction>:
}


ENCODER_SPIN_DIRECTION encoder_get_direction(void)
{
	return encoder_direction;
 4ca:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <encoder_direction>
}
 4ce:	08 95       	ret

000004d0 <buildKeyboardReport>:
}

void buildConsumerReport(uint8_t key)
{
	consumer_Report.reportId = 1;
	consumer_Report.ConsumerControl = key;
 4d0:	e7 ef       	ldi	r30, 0xF7	; 247
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	92 e0       	ldi	r25, 0x02	; 2
 4d6:	90 83       	st	Z, r25
 4d8:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <keyboard_report+0x1>
 4dc:	82 83       	std	Z+2, r24	; 0x02
 4de:	08 95       	ret

000004e0 <usbFunctionSetup>:
}

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uint8_t data[8])
{
 4e0:	fc 01       	movw	r30, r24
	usbRequest_t    *rq = (void *)data;

	if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS)
 4e2:	80 81       	ld	r24, Z
 4e4:	80 76       	andi	r24, 0x60	; 96
 4e6:	80 32       	cpi	r24, 0x20	; 32
 4e8:	51 f5       	brne	.+84     	; 0x53e <usbFunctionSetup+0x5e>
	{    /* class request type */
		if(rq->bRequest == USBRQ_HID_GET_REPORT)
 4ea:	81 81       	ldd	r24, Z+1	; 0x01
 4ec:	81 30       	cpi	r24, 0x01	; 1
 4ee:	c1 f4       	brne	.+48     	; 0x520 <usbFunctionSetup+0x40>
		{  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
			/* we only have one report type, so don't look at wValue */
			DBG1(0x21,rq,8);
			if (rq->wValue.bytes[0] == 1)
 4f0:	82 81       	ldd	r24, Z+2	; 0x02
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	49 f4       	brne	.+18     	; 0x508 <usbFunctionSetup+0x28>
	
}

void buildConsumerReport(uint8_t key)
{
	consumer_Report.reportId = 1;
 4f6:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <consumer_Report>
	consumer_Report.ConsumerControl = key;
 4fa:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <consumer_Report+0x2>
 4fe:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <consumer_Report+0x1>
			/* we only have one report type, so don't look at wValue */
			DBG1(0x21,rq,8);
			if (rq->wValue.bytes[0] == 1)
			{
				buildConsumerReport(KEY_NONE);
				usbMsgPtr = (usbMsgPtr_t)&consumer_Report;
 502:	8a ef       	ldi	r24, 0xFA	; 250
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	06 c0       	rjmp	.+12     	; 0x514 <usbFunctionSetup+0x34>
				return sizeof(consumer_Report);
			}
			
			if(rq->wValue.bytes[0] == 2)
 508:	82 30       	cpi	r24, 0x02	; 2
 50a:	c9 f4       	brne	.+50     	; 0x53e <usbFunctionSetup+0x5e>
			{
				buildKeyboardReport(KEY_NONE);					   
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	e0 df       	rcall	.-64     	; 0x4d0 <buildKeyboardReport>
				usbMsgPtr = (usbMsgPtr_t)&keyboard_report;
 510:	87 ef       	ldi	r24, 0xF7	; 247
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usbMsgPtr+0x1>
 518:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <usbMsgPtr>
				return sizeof(keyboard_report);
 51c:	83 e0       	ldi	r24, 0x03	; 3
 51e:	08 95       	ret
			}
		}
		else if(rq->bRequest == USBRQ_HID_GET_IDLE)
 520:	82 30       	cpi	r24, 0x02	; 2
 522:	41 f4       	brne	.+16     	; 0x534 <usbFunctionSetup+0x54>
		{
			usbMsgPtr = (usbMsgPtr_t)&idleRate;
 524:	8d ef       	ldi	r24, 0xFD	; 253
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usbMsgPtr+0x1>
 52c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <usbMsgPtr>
						
			DBG1(0x22,rq,8);
			return 1;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	08 95       	ret

		}else if(rq->bRequest == USBRQ_HID_SET_IDLE){
 534:	8a 30       	cpi	r24, 0x0A	; 10
 536:	19 f4       	brne	.+6      	; 0x53e <usbFunctionSetup+0x5e>
			DBG1(0x23,rq,8);
			idleRate = rq->wValue.bytes[1];
 538:	83 81       	ldd	r24, Z+3	; 0x03
 53a:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <idleRate>
		}
		
		}else{
		/* no vendor specific requests implemented */
	}
	return 0;
 53e:	80 e0       	ldi	r24, 0x00	; 0
}
 540:	08 95       	ret

00000542 <main>:


int main(void)
{
	odDebugInit();
	usbInit();
 542:	85 d1       	rcall	.+778    	; 0x84e <usbInit>
	keyboard_init();
 544:	66 df       	rcall	.-308    	; 0x412 <keyboard_init>
	usbDeviceDisconnect();
 546:	8c 9a       	sbi	0x11, 4	; 17
	{
		uchar i = 0;
 548:	80 e0       	ldi	r24, 0x00	; 0
		while(--i){
 54a:	81 50       	subi	r24, 0x01	; 1
 54c:	39 f0       	breq	.+14     	; 0x55c <main+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54e:	ef e9       	ldi	r30, 0x9F	; 159
 550:	ff e0       	ldi	r31, 0x0F	; 15
 552:	31 97       	sbiw	r30, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <main+0x10>
 556:	00 c0       	rjmp	.+0      	; 0x558 <main+0x16>
 558:	00 00       	nop
 55a:	f7 cf       	rjmp	.-18     	; 0x54a <main+0x8>
			_delay_ms(1);
		}
	}
	
	usbDeviceConnect();
 55c:	8c 98       	cbi	0x11, 4	; 17
	
	timer2_init();
 55e:	84 d1       	rcall	.+776    	; 0x868 <timer2_init>
	sei();
 560:	78 94       	sei
	
	bool mustCloseConsumer = false;
 562:	c0 e0       	ldi	r28, 0x00	; 0
				break;
				case ENCODER_SPIN_DIRECTION_NONE:
					if (mustCloseConsumer)
					{
						buildConsumerReport(KEY_NONE);
						mustCloseConsumer = false;
 564:	d1 e0       	ldi	r29, 0x01	; 1
}

void buildConsumerReport(uint8_t key)
{
	consumer_Report.reportId = 1;
	consumer_Report.ConsumerControl = key;
 566:	09 ee       	ldi	r16, 0xE9	; 233
 568:	10 e0       	ldi	r17, 0x00	; 0
 56a:	82 ee       	ldi	r24, 0xE2	; 226
 56c:	e8 2e       	mov	r14, r24
 56e:	f1 2c       	mov	r15, r1
 570:	9a ee       	ldi	r25, 0xEA	; 234
 572:	c9 2e       	mov	r12, r25
 574:	d1 2c       	mov	r13, r1
	
	bool mustCloseConsumer = false;
	//bool mustCloseKeyboard = false;
    while (1) 
    {
		usbPoll();   
 576:	65 d0       	rcall	.+202    	; 0x642 <usbPoll>
		keyboard_routine();
 578:	4e df       	rcall	.-356    	; 0x416 <keyboard_routine>
		
		if( usbInterruptIsReady()){
 57a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usbTxStatus1>
 57e:	84 ff       	sbrs	r24, 4
 580:	fa cf       	rjmp	.-12     	; 0x576 <main+0x34>
			ENCODER_SPIN_DIRECTION encoderDirection = encoder_get_direction();
 582:	a3 df       	rcall	.-186    	; 0x4ca <encoder_get_direction>
			
			switch(encoderDirection)
 584:	81 30       	cpi	r24, 0x01	; 1
 586:	51 f0       	breq	.+20     	; 0x59c <main+0x5a>
 588:	20 f1       	brcs	.+72     	; 0x5d2 <main+0x90>
 58a:	82 30       	cpi	r24, 0x02	; 2
 58c:	71 f4       	brne	.+28     	; 0x5aa <main+0x68>
	
}

void buildConsumerReport(uint8_t key)
{
	consumer_Report.reportId = 1;
 58e:	d0 93 fa 00 	sts	0x00FA, r29	; 0x8000fa <consumer_Report>
	consumer_Report.ConsumerControl = key;
 592:	d0 92 fc 00 	sts	0x00FC, r13	; 0x8000fc <consumer_Report+0x2>
 596:	c0 92 fb 00 	sts	0x00FB, r12	; 0x8000fb <consumer_Report+0x1>
 59a:	16 c0       	rjmp	.+44     	; 0x5c8 <main+0x86>
	
}

void buildConsumerReport(uint8_t key)
{
	consumer_Report.reportId = 1;
 59c:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <consumer_Report>
	consumer_Report.ConsumerControl = key;
 5a0:	10 93 fc 00 	sts	0x00FC, r17	; 0x8000fc <consumer_Report+0x2>
 5a4:	00 93 fb 00 	sts	0x00FB, r16	; 0x8000fb <consumer_Report+0x1>
 5a8:	0f c0       	rjmp	.+30     	; 0x5c8 <main+0x86>
					}
				default:
				break;
			}
			
			if(encoderDirection == ENCODER_SPIN_DIRECTION_NONE && !mustCloseConsumer)
 5aa:	81 11       	cpse	r24, r1
 5ac:	e4 cf       	rjmp	.-56     	; 0x576 <main+0x34>
 5ae:	c1 11       	cpse	r28, r1
 5b0:	24 c0       	rjmp	.+72     	; 0x5fa <main+0xb8>
			{
				uint8_t key = keyboard_get_pressed_key();
 5b2:	4a df       	rcall	.-364    	; 0x448 <keyboard_get_pressed_key>
				if(key)
 5b4:	88 23       	and	r24, r24
 5b6:	c9 f0       	breq	.+50     	; 0x5ea <main+0xa8>
				{
					if(key == HID_CONSUMER_MUTE)
 5b8:	82 3e       	cpi	r24, 0xE2	; 226
 5ba:	c1 f4       	brne	.+48     	; 0x5ec <main+0xaa>
	
}

void buildConsumerReport(uint8_t key)
{
	consumer_Report.reportId = 1;
 5bc:	d0 93 fa 00 	sts	0x00FA, r29	; 0x8000fa <consumer_Report>
	consumer_Report.ConsumerControl = key;
 5c0:	f0 92 fc 00 	sts	0x00FC, r15	; 0x8000fc <consumer_Report+0x2>
 5c4:	e0 92 fb 00 	sts	0x00FB, r14	; 0x8000fb <consumer_Report+0x1>
				break;
				case ENCODER_SPIN_DIRECTION_RIGHT:
				{
					buildConsumerReport(HID_CONSUMER_VOLUME_DOWN);
					mustCloseConsumer = true;
					usbSetInterrupt((void *)&consumer_Report, sizeof(consumer_Report));	
 5c8:	63 e0       	ldi	r22, 0x03	; 3
 5ca:	8a ef       	ldi	r24, 0xFA	; 250
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	17 d0       	rcall	.+46     	; 0x5fe <usbSetInterrupt>
				}
				break;
 5d0:	14 c0       	rjmp	.+40     	; 0x5fa <main+0xb8>
				case ENCODER_SPIN_DIRECTION_NONE:
					if (mustCloseConsumer)
 5d2:	cc 23       	and	r28, r28
 5d4:	71 f3       	breq	.-36     	; 0x5b2 <main+0x70>
	
}

void buildConsumerReport(uint8_t key)
{
	consumer_Report.reportId = 1;
 5d6:	d0 93 fa 00 	sts	0x00FA, r29	; 0x8000fa <consumer_Report>
	consumer_Report.ConsumerControl = key;
 5da:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <consumer_Report+0x2>
 5de:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <consumer_Report+0x1>
				case ENCODER_SPIN_DIRECTION_NONE:
					if (mustCloseConsumer)
					{
						buildConsumerReport(KEY_NONE);
						mustCloseConsumer = false;
						usbSetInterrupt((void *)&consumer_Report, sizeof(consumer_Report));
 5e2:	63 e0       	ldi	r22, 0x03	; 3
 5e4:	8a ef       	ldi	r24, 0xFA	; 250
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <main+0xb2>
						usbSetInterrupt((void *)&keyboard_report, sizeof(keyboard_report));
					}
				}
				else
				{
					buildKeyboardReport(KEY_NONE); // fill keyboard_report with 'x' pressed
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	71 df       	rcall	.-286    	; 0x4d0 <buildKeyboardReport>
					//mustCloseKeyboard = false;
					usbSetInterrupt((void *)&keyboard_report, sizeof(keyboard_report));
 5ee:	63 e0       	ldi	r22, 0x03	; 3
 5f0:	87 ef       	ldi	r24, 0xF7	; 247
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	04 d0       	rcall	.+8      	; 0x5fe <usbSetInterrupt>
 5f6:	c0 e0       	ldi	r28, 0x00	; 0
 5f8:	be cf       	rjmp	.-132    	; 0x576 <main+0x34>
				break;
				case ENCODER_SPIN_DIRECTION_NONE:
					if (mustCloseConsumer)
					{
						buildConsumerReport(KEY_NONE);
						mustCloseConsumer = false;
 5fa:	c1 e0       	ldi	r28, 0x01	; 1
 5fc:	bc cf       	rjmp	.-136    	; 0x576 <main+0x34>

000005fe <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 5fe:	cf 93       	push	r28
 600:	c6 2f       	mov	r28, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 602:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <usbTxStatus1>
 606:	24 ff       	sbrs	r18, 4
 608:	0b c0       	rjmp	.+22     	; 0x620 <usbSetInterrupt+0x22>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 60a:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <usbTxStatus1+0x1>
 60e:	28 e8       	ldi	r18, 0x88	; 136
 610:	23 27       	eor	r18, r19
 612:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <usbTxStatus1+0x1>
 616:	fc 01       	movw	r30, r24
 618:	ad e0       	ldi	r26, 0x0D	; 13
 61a:	b1 e0       	ldi	r27, 0x01	; 1
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 61c:	8c 2f       	mov	r24, r28
 61e:	04 c0       	rjmp	.+8      	; 0x628 <usbSetInterrupt+0x2a>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 620:	2a e5       	ldi	r18, 0x5A	; 90
 622:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <usbTxStatus1>
 626:	f7 cf       	rjmp	.-18     	; 0x616 <usbSetInterrupt+0x18>
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 628:	91 91       	ld	r25, Z+
 62a:	9d 93       	st	X+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 62c:	81 50       	subi	r24, 0x01	; 1
 62e:	e1 f7       	brne	.-8      	; 0x628 <usbSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
 630:	6c 2f       	mov	r22, r28
 632:	8d e0       	ldi	r24, 0x0D	; 13
 634:	91 e0       	ldi	r25, 0x01	; 1
 636:	7a dd       	rcall	.-1292   	; 0x12c <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 638:	cc 5f       	subi	r28, 0xFC	; 252
 63a:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 63e:	cf 91       	pop	r28
 640:	08 95       	ret

00000642 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 646:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <usbRxLen>
 64a:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
 64c:	87 fd       	sbrc	r24, 7
 64e:	a3 c0       	rjmp	.+326    	; 0x796 <usbPoll+0x154>
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 650:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <usbRxToken>
 654:	9d 32       	cpi	r25, 0x2D	; 45
 656:	09 f0       	breq	.+2      	; 0x65a <usbPoll+0x18>
 658:	9c c0       	rjmp	.+312    	; 0x792 <usbPoll+0x150>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 65a:	88 30       	cpi	r24, 0x08	; 8
 65c:	09 f0       	breq	.+2      	; 0x660 <usbPoll+0x1e>
 65e:	99 c0       	rjmp	.+306    	; 0x792 <usbPoll+0x150>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 660:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <usbInputBufOffset>
 664:	cc e0       	ldi	r28, 0x0C	; 12
 666:	d0 e0       	ldi	r29, 0x00	; 0
 668:	c8 1b       	sub	r28, r24
 66a:	d1 09       	sbc	r29, r1
 66c:	c0 5e       	subi	r28, 0xE0	; 224
 66e:	de 4f       	sbci	r29, 0xFE	; 254
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 670:	83 ec       	ldi	r24, 0xC3	; 195
 672:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 676:	8a e5       	ldi	r24, 0x5A	; 90
 678:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <usbTxLen>
        usbMsgFlags = 0;
 67c:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 680:	88 81       	ld	r24, Y
 682:	80 76       	andi	r24, 0x60	; 96
 684:	19 f0       	breq	.+6      	; 0x68c <usbPoll+0x4a>
            replyLen = usbFunctionSetup(data);
 686:	ce 01       	movw	r24, r28
 688:	2b df       	rcall	.-426    	; 0x4e0 <usbFunctionSetup>
 68a:	7a c0       	rjmp	.+244    	; 0x780 <usbPoll+0x13e>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 68c:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 68e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
 692:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 694:	81 11       	cpse	r24, r1
 696:	06 c0       	rjmp	.+12     	; 0x6a4 <usbPoll+0x62>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 698:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 69c:	29 e0       	ldi	r18, 0x09	; 9
 69e:	31 e0       	ldi	r19, 0x01	; 1
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	6a c0       	rjmp	.+212    	; 0x778 <usbPoll+0x136>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 6a4:	85 30       	cpi	r24, 0x05	; 5
 6a6:	19 f4       	brne	.+6      	; 0x6ae <usbPoll+0x6c>
        usbNewDeviceAddr = value;
 6a8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <usbNewDeviceAddr>
 6ac:	62 c0       	rjmp	.+196    	; 0x772 <usbPoll+0x130>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 6ae:	86 30       	cpi	r24, 0x06	; 6
 6b0:	09 f0       	breq	.+2      	; 0x6b4 <usbPoll+0x72>
 6b2:	49 c0       	rjmp	.+146    	; 0x746 <usbPoll+0x104>
 6b4:	8b 81       	ldd	r24, Y+3	; 0x03
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 6b6:	81 30       	cpi	r24, 0x01	; 1
 6b8:	19 f4       	brne	.+6      	; 0x6c0 <usbPoll+0x7e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 6ba:	86 e8       	ldi	r24, 0x86	; 134
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	1a c0       	rjmp	.+52     	; 0x6f4 <usbPoll+0xb2>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 6c0:	82 30       	cpi	r24, 0x02	; 2
 6c2:	41 f4       	brne	.+16     	; 0x6d4 <usbPoll+0x92>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 6c4:	84 e6       	ldi	r24, 0x64	; 100
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usbMsgPtr+0x1>
 6cc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <usbMsgPtr>
 6d0:	82 e2       	ldi	r24, 0x22	; 34
 6d2:	35 c0       	rjmp	.+106    	; 0x73e <usbPoll+0xfc>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 6d4:	83 30       	cpi	r24, 0x03	; 3
 6d6:	f1 f4       	brne	.+60     	; 0x714 <usbPoll+0xd2>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 6d8:	91 11       	cpse	r25, r1
 6da:	08 c0       	rjmp	.+16     	; 0x6ec <usbPoll+0xaa>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 6dc:	86 ec       	ldi	r24, 0xC6	; 198
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usbMsgPtr+0x1>
 6e4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <usbMsgPtr>
 6e8:	84 e0       	ldi	r24, 0x04	; 4
 6ea:	29 c0       	rjmp	.+82     	; 0x73e <usbPoll+0xfc>
        SWITCH_CASE(1)
 6ec:	91 30       	cpi	r25, 0x01	; 1
 6ee:	41 f4       	brne	.+16     	; 0x700 <usbPoll+0xbe>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 6f0:	84 eb       	ldi	r24, 0xB4	; 180
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usbMsgPtr+0x1>
 6f8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <usbMsgPtr>
 6fc:	82 e1       	ldi	r24, 0x12	; 18
 6fe:	1f c0       	rjmp	.+62     	; 0x73e <usbPoll+0xfc>
        SWITCH_CASE(2)
 700:	92 30       	cpi	r25, 0x02	; 2
 702:	e1 f4       	brne	.+56     	; 0x73c <usbPoll+0xfa>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 704:	88 e9       	ldi	r24, 0x98	; 152
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usbMsgPtr+0x1>
 70c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <usbMsgPtr>
 710:	8c e1       	ldi	r24, 0x1C	; 28
 712:	15 c0       	rjmp	.+42     	; 0x73e <usbPoll+0xfc>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 714:	81 32       	cpi	r24, 0x21	; 33
 716:	41 f4       	brne	.+16     	; 0x728 <usbPoll+0xe6>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 718:	86 e7       	ldi	r24, 0x76	; 118
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usbMsgPtr+0x1>
 720:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <usbMsgPtr>
 724:	89 e0       	ldi	r24, 0x09	; 9
 726:	0b c0       	rjmp	.+22     	; 0x73e <usbPoll+0xfc>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 728:	82 32       	cpi	r24, 0x22	; 34
 72a:	41 f4       	brne	.+16     	; 0x73c <usbPoll+0xfa>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 72c:	86 e2       	ldi	r24, 0x26	; 38
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usbMsgPtr+0x1>
 734:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <usbMsgPtr>
 738:	8e e3       	ldi	r24, 0x3E	; 62
 73a:	01 c0       	rjmp	.+2      	; 0x73e <usbPoll+0xfc>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 73c:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 73e:	90 e4       	ldi	r25, 0x40	; 64
 740:	90 93 fe 00 	sts	0x00FE, r25	; 0x8000fe <usbMsgFlags>
 744:	1d c0       	rjmp	.+58     	; 0x780 <usbPoll+0x13e>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 746:	88 30       	cpi	r24, 0x08	; 8
 748:	69 f0       	breq	.+26     	; 0x764 <usbPoll+0x122>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 74a:	89 30       	cpi	r24, 0x09	; 9
 74c:	19 f4       	brne	.+6      	; 0x754 <usbPoll+0x112>
        usbConfiguration = value;
 74e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <usbConfiguration>
 752:	0f c0       	rjmp	.+30     	; 0x772 <usbPoll+0x130>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 754:	8a 30       	cpi	r24, 0x0A	; 10
 756:	49 f0       	breq	.+18     	; 0x76a <usbPoll+0x128>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 758:	8b 30       	cpi	r24, 0x0B	; 11
 75a:	59 f4       	brne	.+22     	; 0x772 <usbPoll+0x130>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 75c:	8b e4       	ldi	r24, 0x4B	; 75
 75e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <usbTxStatus1+0x1>
 762:	07 c0       	rjmp	.+14     	; 0x772 <usbPoll+0x130>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 764:	2f e1       	ldi	r18, 0x1F	; 31
 766:	31 e0       	ldi	r19, 0x01	; 1
 768:	02 c0       	rjmp	.+4      	; 0x76e <usbPoll+0x12c>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 76a:	29 e0       	ldi	r18, 0x09	; 9
 76c:	31 e0       	ldi	r19, 0x01	; 1
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	03 c0       	rjmp	.+6      	; 0x778 <usbPoll+0x136>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 772:	29 e0       	ldi	r18, 0x09	; 9
 774:	31 e0       	ldi	r19, 0x01	; 1
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 776:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 778:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <usbMsgPtr+0x1>
 77c:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <usbMsgPtr>
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 780:	9f 81       	ldd	r25, Y+7	; 0x07
 782:	91 11       	cpse	r25, r1
 784:	04 c0       	rjmp	.+8      	; 0x78e <usbPoll+0x14c>
 786:	9e 81       	ldd	r25, Y+6	; 0x06
 788:	98 17       	cp	r25, r24
 78a:	08 f4       	brcc	.+2      	; 0x78e <usbPoll+0x14c>
 78c:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 78e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <usbMsgLen>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 792:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 796:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <usbTxLen>
 79a:	84 ff       	sbrs	r24, 4
 79c:	4b c0       	rjmp	.+150    	; 0x834 <usbPoll+0x1f2>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 79e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <usbMsgLen>
 7a2:	8f 3f       	cpi	r24, 0xFF	; 255
 7a4:	09 f4       	brne	.+2      	; 0x7a8 <usbPoll+0x166>
 7a6:	46 c0       	rjmp	.+140    	; 0x834 <usbPoll+0x1f2>
 7a8:	c8 2f       	mov	r28, r24
 7aa:	89 30       	cpi	r24, 0x09	; 9
 7ac:	08 f0       	brcs	.+2      	; 0x7b0 <usbPoll+0x16e>
 7ae:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 7b0:	8c 1b       	sub	r24, r28
 7b2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 7b6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <usbTxBuf>
 7ba:	88 e8       	ldi	r24, 0x88	; 136
 7bc:	89 27       	eor	r24, r25
 7be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <usbTxBuf>
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 7c2:	cc 23       	and	r28, r28
 7c4:	59 f1       	breq	.+86     	; 0x81c <usbPoll+0x1da>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 7c6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <usbMsgPtr>
 7ca:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 7ce:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <usbMsgFlags>
 7d2:	26 ff       	sbrs	r18, 6
 7d4:	12 c0       	rjmp	.+36     	; 0x7fa <usbPoll+0x1b8>
 7d6:	a0 e0       	ldi	r26, 0x00	; 0
 7d8:	b1 e0       	ldi	r27, 0x01	; 1
 7da:	2c 2f       	mov	r18, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 7dc:	ac 01       	movw	r20, r24
 7de:	40 50       	subi	r20, 0x00	; 0
 7e0:	51 40       	sbci	r21, 0x01	; 1
 7e2:	fa 01       	movw	r30, r20
 7e4:	ea 0f       	add	r30, r26
 7e6:	fb 1f       	adc	r31, r27
 7e8:	e4 91       	lpm	r30, Z
                    *data++ = c;
 7ea:	11 96       	adiw	r26, 0x01	; 1
 7ec:	ec 93       	st	X, r30
 7ee:	11 97       	sbiw	r26, 0x01	; 1
                    r++;
                }while(--i);
 7f0:	21 50       	subi	r18, 0x01	; 1
 7f2:	11 96       	adiw	r26, 0x01	; 1
 7f4:	21 11       	cpse	r18, r1
 7f6:	f5 cf       	rjmp	.-22     	; 0x7e2 <usbPoll+0x1a0>
 7f8:	08 c0       	rjmp	.+16     	; 0x80a <usbPoll+0x1c8>
 7fa:	e1 e0       	ldi	r30, 0x01	; 1
 7fc:	f1 e0       	ldi	r31, 0x01	; 1
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 7fe:	dc 01       	movw	r26, r24
 800:	2c 2f       	mov	r18, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 802:	3d 91       	ld	r19, X+
 804:	31 93       	st	Z+, r19
                    r++;
                }while(--i);
 806:	21 50       	subi	r18, 0x01	; 1
 808:	e1 f7       	brne	.-8      	; 0x802 <usbPoll+0x1c0>
 80a:	01 96       	adiw	r24, 0x01	; 1
 80c:	2f ef       	ldi	r18, 0xFF	; 255
 80e:	2c 0f       	add	r18, r28
 810:	82 0f       	add	r24, r18
 812:	91 1d       	adc	r25, r1
            }
            usbMsgPtr = r;
 814:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <usbMsgPtr+0x1>
 818:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <usbMsgPtr>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 81c:	6c 2f       	mov	r22, r28
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	91 e0       	ldi	r25, 0x01	; 1
 822:	84 dc       	rcall	.-1784   	; 0x12c <usbCrc16Append>
        len += 4;           /* length including sync byte */
 824:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 826:	cc 30       	cpi	r28, 0x0C	; 12
 828:	19 f0       	breq	.+6      	; 0x830 <usbPoll+0x1ee>
            usbMsgLen = USB_NO_MSG;
 82a:	8f ef       	ldi	r24, 0xFF	; 255
 82c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <usbMsgLen>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 830:	c0 93 ca 00 	sts	0x00CA, r28	; 0x8000ca <usbTxLen>
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 834:	84 e1       	ldi	r24, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 836:	90 b3       	in	r25, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 838:	94 71       	andi	r25, 0x14	; 20
 83a:	31 f4       	brne	.+12     	; 0x848 <usbPoll+0x206>
 83c:	81 50       	subi	r24, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 83e:	d9 f7       	brne	.-10     	; 0x836 <usbPoll+0x1f4>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 840:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <usbNewDeviceAddr>
    usbDeviceAddr = 0;
 844:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <usbDeviceAddr>
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 848:	df 91       	pop	r29
 84a:	cf 91       	pop	r28
 84c:	08 95       	ret

0000084e <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 84e:	85 b7       	in	r24, 0x35	; 53
 850:	82 60       	ori	r24, 0x02	; 2
 852:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 854:	8b b7       	in	r24, 0x3b	; 59
 856:	80 64       	ori	r24, 0x40	; 64
 858:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 85a:	eb e0       	ldi	r30, 0x0B	; 11
 85c:	f1 e0       	ldi	r31, 0x01	; 1
 85e:	8b e4       	ldi	r24, 0x4B	; 75
 860:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 862:	8a e5       	ldi	r24, 0x5A	; 90
 864:	80 83       	st	Z, r24
 866:	08 95       	ret

00000868 <timer2_init>:

#include "Button_debounce.h"


void timer2_init() {
	TCCR2 = ( 1 << CS20 ) | ( 1 << CS21 ) | ( 1 << CS22 );// prescaler 64
 868:	87 e0       	ldi	r24, 0x07	; 7
 86a:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= ( 1 << WGM21 ); //CTC mode
 86c:	85 b5       	in	r24, 0x25	; 37
 86e:	88 60       	ori	r24, 0x08	; 8
 870:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0x9B;// 10 ms at 16Mhz
 872:	8b e9       	ldi	r24, 0x9B	; 155
 874:	83 bd       	out	0x23, r24	; 35
	
	TIMSK = ( 1 << OCIE2 ); // enable interrupt
 876:	80 e8       	ldi	r24, 0x80	; 128
 878:	89 bf       	out	0x39, r24	; 57
 87a:	08 95       	ret

0000087c <__vector_3>:
}

ISR(TIMER2_COMP_vect) {
 87c:	1f 92       	push	r1
 87e:	0f 92       	push	r0
 880:	0f b6       	in	r0, 0x3f	; 63
 882:	0f 92       	push	r0
 884:	11 24       	eor	r1, r1
 886:	2f 93       	push	r18
 888:	3f 93       	push	r19
 88a:	4f 93       	push	r20
 88c:	5f 93       	push	r21
 88e:	6f 93       	push	r22
 890:	7f 93       	push	r23
 892:	8f 93       	push	r24
 894:	9f 93       	push	r25
 896:	af 93       	push	r26
 898:	bf 93       	push	r27
 89a:	ef 93       	push	r30
 89c:	ff 93       	push	r31
	
	button_routine();
 89e:	74 dd       	rcall	.-1304   	; 0x388 <button_routine>
	
}
 8a0:	ff 91       	pop	r31
 8a2:	ef 91       	pop	r30
 8a4:	bf 91       	pop	r27
 8a6:	af 91       	pop	r26
 8a8:	9f 91       	pop	r25
 8aa:	8f 91       	pop	r24
 8ac:	7f 91       	pop	r23
 8ae:	6f 91       	pop	r22
 8b0:	5f 91       	pop	r21
 8b2:	4f 91       	pop	r20
 8b4:	3f 91       	pop	r19
 8b6:	2f 91       	pop	r18
 8b8:	0f 90       	pop	r0
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	0f 90       	pop	r0
 8be:	1f 90       	pop	r1
 8c0:	18 95       	reti

000008c2 <_exit>:
 8c2:	f8 94       	cli

000008c4 <__stop_program>:
 8c4:	ff cf       	rjmp	.-2      	; 0x8c4 <__stop_program>
